{"version":3,"file":"static/js/71.d9270aae.chunk.js","mappings":"0KAEaA,E,QAAMC,GAAAA,OAAa,CAC9BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,qC,wFCHAC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACvBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SACGG,EAAMK,SAFFL,EAAME,GADA,KAStB,C,2KCZYI,EAAe,mCAAG,WAAMC,GAAN,gGAEJjB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9CG,OAAQ,CACNe,KAAM,EACND,MAAAA,KALuB,cAErBE,EAFqB,yBAQpBA,EAASC,KAAKC,SARM,gCAU3BC,IAAAA,OAAAA,QAAwB,KAAMC,SAVH,yDAAH,sD,uCCAfC,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8GAOLE,EAASF,EAAAA,GAAAA,OAAH,sK,SCLbG,EAASC,EAAAA,KAAaC,MAAM,CAAEC,OAAQF,EAAAA,KAAaG,aAEnDC,EAAgB,CACpBF,OAAQ,IAGGG,EAAa,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACrBC,EAAY,mCAAG,WAAOC,EAAQC,GAAf,oEACU,KAAzBD,EAAON,OAAOQ,OADC,yCAEVjB,IAAAA,OAAAA,QAAwB,kCAFd,uBAIba,EAAWE,EAAON,OAAOS,eAJZ,OAKnBF,EAAQG,YALW,2CAAH,wDAOlB,OACE,0BACE,SAAC,KAAD,CACER,cAAeA,EACfS,SAAUN,EACVO,iBAAkBf,EAHpB,UAKE,UAAC,KAAD,YACE,SAACD,EAAD,CAAQiB,KAAK,SAAS,aAAW,SAAjC,qBAIA,SAACpB,EAAD,CACEqB,KAAK,SACLD,KAAK,OACLE,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,SAAC,KAAD,CAAcH,KAAK,SAASI,UAAU,cAK/C,E,8BCnCYC,EAAS,WAAO,IAAD,EAC1B,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAE/CC,EAAAA,EAAAA,YAAU,WAAM,wCAId,6GAEyB3C,EAAgByC,GAFzC,OAEUnD,EAFV,OAGI+C,EAAiB/C,GAHrB,gDAKIgB,IAAAA,OAAAA,QAAA,MALJ,0DAJc,sBACI,KAAdmC,GADU,mCAYdG,EACD,GAAE,CAACH,IASJ,OACE,6BACE,SAACvB,EAAD,CAAYC,WAVK,SAAA0B,GACfJ,IAAcI,IAIlBL,EAD4B,KAATK,EAAc,CAAE5C,MAAO4C,GAAS,CAAC,GAEpDR,EAAiB,IAClB,IAIID,EAAcU,OAAS,IACtB,SAACzD,EAAA,EAAD,CAAcC,OAAQ8C,IAEE,IAAzBA,EAAcU,QAAgBP,EAAaO,OAAS,IACnD,iDAIP,EACD,G","sources":["api/api.js","components/TrendingList.jsx","api/getMovieByQuery.js","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '7d3bca08f8a690c3623c76013972de57',\n  },\n});\n","import { Link, useLocation } from 'react-router-dom';\n\nexport const TrendingList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import Notiflix from 'notiflix';\nimport { api } from './api';\n\nexport const getMovieByQuery = async query => {\n  try {\n    const response = await api.get('/search/movie', {\n      params: {\n        page: 1,\n        query,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n};\n","import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const Input = styled(Field)`\n  margin-left: 5px;\n  margin-right: 5px;\n  border-radius: 3px;\n  font-size: 14px;\n`;\n\nexport const Button = styled.button`\n  font-size: 14px;\n  background-color: white;\n  margin-left: 15px;\n  border: 1px solid grey;\n  border-radius: 3px;\n  padding: 3px 10px;\n`;\n","import * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { Formik, ErrorMessage, Form } from 'formik';\nimport { Input, Button } from './SearchForm.styled';\n\nconst schema = Yup.object().shape({ search: Yup.string().required() });\n\nconst initialValues = {\n  search: '',\n};\n\nexport const SearchForm = ({ submitProp }) => {\n  const handleSubmit = async (values, actions) => {\n    if (values.search.trim() === '') {\n      return Notiflix.Notify.failure('Tape your search query please');\n    }\n    await submitProp(values.search.toLowerCase());\n    actions.resetForm();\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <Form>\n          <Button type=\"submit\" aria-label=\"Search\">\n            search\n          </Button>\n\n          <Input\n            name=\"search\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search monies\"\n          />\n          <ErrorMessage name=\"search\" component=\"div\" />\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { getMovieByQuery } from 'api/getMovieByQuery';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { TrendingList } from 'components/TrendingList';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nexport const Movies = () => {\n  const [arrayOfMovies, setArrayOfMovies] = useState([]);\n  //   const [searchString, setSearchString] = useState('');\n  const [searchString, setSearchString] = useSearchParams();\n  const movieName = searchString.get('query') ?? '';\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    async function getMovies() {\n      try {\n        const movies = await getMovieByQuery(movieName);\n        setArrayOfMovies(movies);\n      } catch (error) {\n        Notiflix.Notify.failure(error);\n      }\n    }\n    getMovies();\n  }, [movieName]);\n  const handleSubmit = info => {\n    if (movieName === info) {\n      return;\n    }\n    const nextString = info !== '' ? { query: info } : {};\n    setSearchString(nextString);\n    setArrayOfMovies([]);\n  };\n  return (\n    <main>\n      <SearchForm submitProp={handleSubmit}></SearchForm>\n      {arrayOfMovies.length > 0 && (\n        <TrendingList movies={arrayOfMovies}></TrendingList>\n      )}\n      {arrayOfMovies.length === 0 && searchString.length > 0 && (\n        <div>Nothing has found</div>\n      )}\n    </main>\n  );\n};\nexport default Movies;\n"],"names":["api","axios","baseURL","params","api_key","TrendingList","movies","location","useLocation","map","movie","to","id","state","from","title","getMovieByQuery","query","page","response","data","results","Notiflix","message","Input","styled","Field","Button","schema","Yup","shape","search","required","initialValues","SearchForm","submitProp","handleSubmit","values","actions","trim","toLowerCase","resetForm","onSubmit","validationSchema","type","name","autoComplete","autoFocus","placeholder","component","Movies","useState","arrayOfMovies","setArrayOfMovies","useSearchParams","searchString","setSearchString","movieName","get","useEffect","getMovies","info","length"],"sourceRoot":""}